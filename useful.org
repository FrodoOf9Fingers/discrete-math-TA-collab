#+TITLE:  Useful
#+AUTHOR: Rick Neff
#+EMAIL:  rick.neff@gmail.com
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+STARTUP:   overview

* Before Use
  It would be preferable to set up a few things to avoid being prompted for
  input as each repo is downloaded.
  
  Make sure you've set your home variable

  Setup credential cacheing (See
  http://stackoverflow.com/questions/5343068/is-there-a-way-to-skip-password-typing-when-using-https-on-github)
  This is done in Git Bash.

  Set a default for remote.pushDefault ( SPC SPC customize-variable
  magit-clone-set-remote.pushDefault ). I don't know exactly what the difference
  is between the two settings, but you -really- don't want it on ~ask~, or else
  it will prompt you for every repo that you download.

* Elisp Code 

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'cl)

;; shell-command requires that we use the native machine's directory seperator.
;; If you are not using windows, change the following variable to 1 forward slash '/'.
(setq dirSep "\\")
(setq localPath "C:\\Users\\Joseph\\temp")

;; Github class names
  (setq dm2 "rmn97152")

  (setq dm3 "rmn97153")

  (setq dm1Weeks
'(("week01" t nil)))

  ;; Lists of assignments and whether they have team/individual componets
  ;; (week, hasIndividual, hasTeam)
  (setq dm2Weeks
  '(("week00" t nil)
   ("week01" nil t)
   ("week02" nil t)))

  (setq dm3Weeks
  '(("week00" t nil)
   ("week01" nil t)
   ("week02" nil t)))

  ;; Lists of class teams
  (setq dm2Teams
  '(("friendly-pancake" "team001")
  ("rogue-one" "team002")
  ("Stormtrooper-Sharpshooters" "team003")
  ("team-one" "team004")
  ("techbound" "team005")
  ("the-golden-badger-crew" "team006")))


  (setq dm3Teams
  '(("Bayes-Squared" "team001")
  ("bumblebee-squad" "team002")
  ("MJ" "team003")))

  ;; Lists of students (github username, student number, student identifier (inumber or name, up to Bro. Neff))
  (setq dm3Students
  '(("abegjeff" "Student001" "")
  ("ConsoleBeep" "Student002" "")
  ("eversolea" "Student003" "")
  ("JonathonBraunesreither" "Student004" "")
  ("keanedawg" "Student005" "")
  ("Laksh511" "Student006" "")
  ("mhartle2" "Student007" "")
  ("Roman-Sanchez" "Student008" "")
  ("wkshumway" "Student009" "")))

  (setq dm2Students
  '(("alanxoc3" "Student001" "")
  ("alexandercasal" "Student002" "")
  ("chrisbdaemon" "Student003" "")
  ("coljamkop" "Student004" "")
  ("ericburdett" "Student005" "")
  ("eversolea" "Student006" "")
  ("Gowthar" "Student007" "")
  ("Gwinert" "Student008" "")
  ("joshbackstein" "Student009" "")
  ("keanedawg" "Student010" "")
  ("michaellucero" "Student011" "")
  ("mikehill0917" "Student012" "")
  ("mining246" "Student013" "")
  ("QuadeMorrison" "Student014" "")
  ("rhubba4863" "Student015" "")
  ("Roman-Sanchez" "Student016" "")
  ("sethchilders92" "Student017" "")
  ("TravisCon" "Student018" "")))

  (setq dm1Students
  '(("jkalldre" "Student001" "")
  ("ClownBacon45" "Student002" "")
  ("cameronball183461" "Student003" "")
  ("tjab6" "Student004" "")
  ("Beesleyz" "Student005" "")
  ("meritcapener" "Student006" "")
  ("Where44444" "Student007" "")
  ("jasonchio" "Student008" "")
  ("fmchora" "Student009" "")
  ("Dillongc21" "Student010" "")
  ("ecollett1" "Student011" "")
  ("skazerk" "Student012" "")
  ("danielmartincraig" "Student013" "")
  ("jcurtis369" "Student014" "")
  ("bdamitz" "Student015" "")
  ("spiritnsky" "Student016" "")
  ("bendzado" "Student017" "")
  ("benjameep" "Student018" "")
  ("sellis5566" "Student019" "")
  ("cambreafisher" "Student020" "")
  ("rfowler1994" "Student021" "")
  ("yellowbronco71" "Student022" "")
  ("15gagnonp" "Student023" "")
  ("anuar161189" "Student024" "")
  ("Herofly58" "Student025" "")
  ("DerHabicht" "Student026" "")
  ("caleblj" "Student027" "")
  ("tyjkenn" "Student028" "")
  ("nnlamb25" "Student029" "")
  ("davego44" "Student030" "")
  ("mdanielp" "Student031" "")
  ("Shua11" "Student032" "")
  ("jake61392" "Student033" "")
  ("Brooken2" "Student034" "")
  ("scott56gps" "Student035" "")
  ("bigbruh62" "Student036" "")
  ("ke7soccerman" "Student037" "")
  ("jarreed0" "Student038" "")
  ("ilia-ilia14" "Student039" "")
  ("jcreager11" "Student040" "")
  ("JohnSmidt" "Student041" "")
  ("alyssansmith" "Student042" "")
  ("ksnider92" "Student043" "")
  ("DavidTilley" "Student044" "")
  ("edceln" "Student045" "")
  ("vajpov" "Student046" "")
  ("jsvilchis" "Student047" "")
  ("cynblkfox" "Student048" "")
  ("parkerweech" "Student049" "")
  ("welkerbrendon" "Student050" "")
  ("mjnks" "Student051" "")
  ("woolleylandon" "Student052" "")
  ("bwright400" "Student053" "")
  ("pianomn16" "Student054" "")
  ("diakoptes" "Student055" "")
  ("rhubba4863" "Student056" "")))


  (defun shell-git-create-branch (path branch-name)
    (let ((default-directory path))
      (shell-command (concat "git branch " branch-name))))

  (defun shell-git-clone-repo (path repo folder-name)
   (message path)
   (shell-command (concat "mkdir " path))
   (let ((default-directory path))
     (shell-command (concat "git clone " repo " " path dirSep folder-name))))

  (defun shell-git-commit-push (path message)
    (let ((default-directory path))
      (shell-command (concat "git commit -a -m \"" message "\""))
      (shell-command "git push")))

  (defun shell-git-switch-branch (path branch-name)
    (let ((default-directory path))
      (shell-command (concat "git checkout " branch-name))))

  (defun createGradingBranch (localPath class week owner)
      (loop for owner in owners do
        (shell-git-create-branch (createFullLocalPath localPath class week (nth 1 owner)) "Grading")
        (shell-git-switch-branch (createFullLocalPath localPath class week (nth 1 owner)) "Grading")))


  (defun cloneGitRepo (localPath class week owners)
      (loop for owner in owners do
        (shell-git-clone-repo (concat localPath dirSep class dirSep week) 
                              (createGitPath class week (nth 0 owner)) 
                              (nth 1 owner)) 
        (sleep-for 2))) ;;Required with magit, not sure about shell-command

  (defun commitPushGit (localPath class week owners)
    (loop for owner in owners do
      (shell-git-commit-push (createFullLocalPath localPath class week (nth 1 owner)) "Grading is done")))

  (defun createFullLocalPath (localPath class week repoID)
    (concat localPath dirSep class dirSep week dirSep repoID dirSep))

  (defun weekToAssignmentName (week)
    (concat "wa" (substring week -2 nil) ".org"))

  (defun createGitPath (class week owner)
    (setq gitPath (concat "https://github.com/rmn9715"
                     (cond ((string= class "dm1") "")
                           ((string= class "dm2") "2")
                           ((string= class "dm3") "3")
                           ((string= class "dm4") "4"))
                     "/" class week "-" owner ".git")))

  (defun openAssignments (class week owners)
      (loop for owner in owners do
        (switch-to-buffer (find-file-noselect (concat
                           (createFullLocalPath localPath class week (nth 1 owner))
                           (weekToAssignmentName week))))))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
;;When working on a team assignment, make sure that you change dmXStudents to dmXTeams
;;
;(cloneGitRepo localPath "dm1" "week01" dm1Students)
;(createGradingBranch localPath "dm1" "week01" dm1Students)
;(openAssignments "dm1" "week01" dm1Students)
;(commitPushGit localPath "dm1" "week01" dm1Students)
#+END_SRC

#+RESULTS:

